{"version":3,"sources":["components/Update.js","components/ActionList.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Update","e","preventDefault","target","reset","className","this","props","state","coins","map","name","value","onSubmit","handleSubmit","bind","id","type","onChange","handleNewCoin","handleNewCoinValue","to","onClick","updateCoin","Component","ActionList","from","before","after","del","Main","switch","toggle","setState","handleInputSum","tempFrom","handleFrom","selected","tempTo","handleTo","handleStart","href","actions","i","App","delAction","num","filtered","filter","newCoin","newCoinValue","flag","length","coinObject","alert","tempInputSum","isNum","isNaN","MultiplyOperator","DivideOperator","sum","actionId","tempAction","tempSum","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAGqBA,G,iLAEJC,GACTA,EAAEC,iBACFD,EAAEE,OAAOC,U,+BAIT,OACI,yBAAKC,UAAU,UACX,sCACA,6BACA,yBAAKA,UAAU,SACX,+BACK,4BACG,oCACA,sCAEHC,KAAKC,MAAMC,MAAMC,MAAMC,KAAI,SAACT,GACzB,OACI,4BACK,4BAAKA,EAAEU,MACP,4BAAKV,EAAEW,aAK5B,6BAEA,0BAAMC,SAAUP,KAAKQ,aAAaC,KAAKT,OACvC,mCACI,2BAAOU,GAAG,cAAcC,KAAK,OAAOC,SAAUZ,KAAKC,MAAMY,gBACzD,6BACJ,wCACI,2BAAOH,GAAG,cAAcC,KAAK,OAAOC,SAAUZ,KAAKC,MAAMa,qBACzD,6BAGJ,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,4BAAQC,QAAShB,KAAKC,MAAMgB,YAA5B,gB,GAvCoBC,cCDfC,E,uKAGP,IAAD,OACL,OAIA,yBAAKpB,UAAU,cACf,iCAAOC,KAAKC,MAAMS,IAEjB,oCAAUV,KAAKC,MAAMmB,KAArB,QAAgCpB,KAAKC,MAAMc,IAE3C,2BAAIf,KAAKC,MAAMoB,OAAQrB,KAAKC,MAAMoB,OAAO,GAAzC,IAA8CrB,KAAKC,MAAMqB,MAAOtB,KAAKC,MAAMqB,MAAM,IACjF,4BAAQN,QAAS,WAAK,EAAKf,MAAMsB,IAAI,EAAKtB,MAAMS,MAAhD,U,GAd+BQ,aCEnBM,E,kDACjB,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IAeVwB,OAAO,YACoB,IAApB,EAAKvB,MAAMwB,OACV,EAAKC,SAAS,CAACD,QAAO,IAEtB,EAAKC,SAAS,CAACD,QAAO,KAjB1B,EAAKxB,MAAQ,CACRwB,QAAO,GAJG,E,yDASN/B,GACTA,EAAEC,iBACFD,EAAEE,OAAOC,U,+BAmBH,IAAD,OACL,OACI,yBAAKC,UAAU,QACX,wCACJ,0BAAMQ,SAAUP,KAAKQ,aAAaC,KAAKT,OACnC,6BACA,2BAAOW,KAAK,OAAOC,SAAUZ,KAAKC,MAAM2B,iBAChC,6BACN,yCACG,4BAAQtB,MAAON,KAAKC,MAAMC,MAAM2B,SAAUjB,SAAUZ,KAAKC,MAAM6B,YAC/D,4BAAQxB,MAAM,GAAGyB,UAAQ,GAAzB,iBACA/B,KAAKC,MAAMC,MAAMC,MAAMC,KAAI,SAACT,GAAK,OAAO,4BAAQW,MAAOX,EAAEU,MAAOV,EAAEU,KAA1B,SAC/B,8BAGd,6BACE,uCACG,4BAAQC,MAAON,KAAKC,MAAMC,MAAM8B,OAAQpB,SAAUZ,KAAKC,MAAMgC,UAC7D,4BAAQ3B,MAAM,GAAGyB,UAAQ,GAAzB,iBACA/B,KAAKC,MAAMC,MAAMC,MAAMC,KAAI,SAACT,GAAK,OAAO,4BAAQW,MAAOX,EAAEU,MAAOV,EAAEU,KAA1B,SAC/B,8BAKN,6BACA,4BAAQW,QAAShB,KAAKC,MAAMiC,aAA5B,SACA,8BAGA,kBAAC,IAAD,CAAMnB,GAAG,WAAT,UACA,uBAAGoB,KAAK,2BAAR,sBACA,4BAAQnB,QAAShB,KAAKyB,QAAtB,sBACA,6BAGA,6BACMzB,KAAKE,MAAMwB,QAAU1B,KAAKC,MAAMC,MAAMkC,QAAQhC,KAAI,SAACT,EAAE0C,GACnD,OACS,kBAAC,EAAD,CAAYjB,KAAMzB,EAAEyB,KACPL,GAAIpB,EAAEoB,GACLM,OAAQ1B,EAAE0B,OACTC,MAAO3B,EAAE2B,MACRZ,GAAIf,EAAEe,GACLa,IAAK,EAAKtB,MAAMsB,e,GA3ExCL,aCIboB,E,kDACnB,WAAYrC,GAAQ,IAAD,8BACjB,cAAMA,IAeRsC,UAAU,SAACC,GACT,IAAIC,EAAS,EAAKvC,MAAMkC,QAAQM,QAAO,SAAC/C,GAAD,OAAMA,EAAEe,KAAK8B,KACpD,EAAKb,SAAS,CAACS,QAAQK,KAlBN,EAqBnB5B,cAAc,SAAClB,GACb,EAAKgC,SAAS,CAACgB,QAAQhD,EAAEE,OAAOS,SAtBf,EAwBnBQ,mBAAmB,SAACnB,GAClB,EAAKgC,SAAS,CAACiB,aAAajD,EAAEE,OAAOS,SAzBpB,EA4BnBW,WAAW,WAEP,IAAI4B,EAAK,EAuBL,GAtBJ,EAAK3C,MAAMC,MAAMC,KAAI,SAACT,GACf,EAAKO,MAAMyC,UAAUhD,EAAEU,MACxBwC,OAoBS,IAAPA,GAAY,EAAK3C,MAAMyC,QAAQG,OAAO,GAAK,EAAK5C,MAAM0C,aAAa,EAAE,CAEvE,IAAIG,EAAW,CAAC1C,KAAK,EAAKH,MAAMyC,QAASrC,MAAM,EAAKJ,MAAM0C,cAC1D,EAAKjB,SAAS,CAACxB,MAAM,GAAD,mBAAK,EAAKD,MAAMC,OAAhB,CAAuB4C,WAE3CC,MAAM,QA1DG,EAiEnBlB,WAAW,SAACnC,GACV,EAAKgC,SAAS,CAACE,SAASlC,EAAEE,OAAOS,SAlEhB,EAoEnB2B,SAAS,SAACtC,GACR,EAAKgC,SAAS,CAACK,OAAOrC,EAAEE,OAAOS,SArEd,EAuEnBsB,eAAe,SAACjC,GACZ,EAAKgC,SAAS,CAACsB,aAAatD,EAAEE,OAAOS,SAxEtB,EA2EnB4B,YAAY,WAEN,IAAIgB,EAAQC,MAAM,EAAKjD,MAAM+C,cACzBG,EAAiB,EACrB,EAAKlD,MAAMC,MAAMC,KAAI,SAACT,GACf,EAAKO,MAAM2B,WAAWlC,EAAEU,OACxB+C,EAAiBzD,EAAEW,UAI1B,IAAI+C,EAAe,EAUnB,GATA,EAAKnD,MAAMC,MAAMC,KAAI,SAACT,GACf,EAAKO,MAAM8B,SAASrC,EAAEU,OACtBgD,EAAe1D,EAAEW,WAOpB4C,GAAS,EAAKhD,MAAM+C,aAAa,EAAE,CAE5B,IAAIK,EAAM,EAAKpD,MAAM+C,aAAeG,EAE/BE,GAAUD,EAERL,MAAMM,GAGJ,IAAIC,EAAW,EAAKrD,MAAMkC,QAAQU,OAAO,EACrCU,EAAW,CAACpC,KAAK,EAAKlB,MAAM2B,SACdd,GAAG,EAAKb,MAAM8B,OACbX,OAAO,EAAKnB,MAAM+C,aACf3B,MAAMgC,EACJ5C,GAAG6C,GAE3B,EAAK5B,SAAS,CAACS,QAAQ,GAAD,mBAAK,EAAKlC,MAAMkC,SAAhB,CAAwBoB,WAE9DR,MAAM,OAIV,EAAKrB,SAAS,CAACsB,aAAa,KAlHhC,EAAK/C,MAAQ,CACXC,MAAM,CAAC,CAACE,KAAK,UAAUC,MAAM,GACpB,CAACD,KAAK,SAASC,MAAM,KACnB,CAACD,KAAK,OAAOC,MAAM,IAC9B8B,QAAS,GACTP,SAAS,GACTG,OAAO,GACPyB,QAAQ,EACRd,QAAQ,GACRC,aAAa,GAZE,E,qDA6HT,IAAD,OACP,OACE,yBAAK7C,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2D,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAC3D,GAAD,OAAW,kBAAC,EAAD,iBAAUA,EAAV,CACMC,MAAO,EAAKA,MACX4B,WAAY,EAAKA,WAChBG,SAAU,EAAKA,SACdL,eAAgB,EAAKA,eACpBM,YAAa,EAAKA,YACjBX,IAAK,EAAKgB,gBAI9D,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,UAAUC,OAAQ,SAAC3D,GAAD,OAAW,kBAAC,EAAD,iBAAYA,EAAZ,CACSC,MAAO,EAAKA,MACXW,cAAe,EAAKA,cACnBC,mBAAoB,EAAKA,mBACxBG,WAAY,EAAKA,wB,GAjJvDC,aCIb2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.daba26e1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {BrowserRouter as Router,Switch,Route,Link} from \"react-router-dom\"\r\n\r\nexport default class Update extends Component {\r\n   \r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        e.target.reset();\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className='Update'>\r\n                <h1>Update</h1>\r\n                <br/>\r\n                <div className='table'>\r\n                    <table >\r\n                         <tr>\r\n                            <th>Type</th>\r\n                            <th>value</th>\r\n                        </tr>\r\n                        {this.props.state.coins.map((e)=>{\r\n                            return (\r\n                                <tr>\r\n                                     <td>{e.name}</td>\r\n                                     <td>{e.value}</td>\r\n                                 </tr>\r\n                            )})}\r\n                    </table>\r\n                </div>\r\n                <br/>\r\n\r\n                <form onSubmit={this.handleSubmit.bind(this)}>\r\n                <p>Type</p>\r\n                    <input id=\"coinsInputs\" type=\"text\" onChange={this.props.handleNewCoin}/>\r\n                    <br/>\r\n                <p>New Value</p>\r\n                    <input id=\"coinsInputs\" type=\"text\" onChange={this.props.handleNewCoinValue}/>\r\n                    <br/>\r\n                \r\n\r\n                <Link to='/'>Back</Link>\r\n                <button onClick={this.props.updateCoin}>Update</button>\r\n               </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ActionList extends Component {\r\n    \r\n    \r\n    render() {\r\n        return (\r\n        //this component get :\r\n        //from coin$ to coin$ \r\n        //from sum$  to sum$ \r\n        <div className='ActionList'> \r\n        <h2> #{this.props.id}</h2>\r\n\r\n         <p>from: {this.props.from} to: {this.props.to}</p>\r\n            \r\n         <p>{this.props.before}{this.props.before[0]}={this.props.after}{this.props.after[0]}</p>  \r\n         <button onClick={()=>{this.props.del(this.props.id)}}>x</button>\r\n     </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {BrowserRouter as Router,Switch,Route,Link} from \"react-router-dom\"\r\nimport ActionList from './ActionList.js'\r\n\r\nexport default class Main extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             toggle:false\r\n        }\r\n    }\r\n    \r\n     \r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        e.target.reset();\r\n       \r\n        \r\n    }\r\n\r\n    switch=()=>{\r\n        if(this.state.toggle===false){\r\n            this.setState({toggle:true})\r\n        }else{\r\n            this.setState({toggle:false})\r\n        }\r\n        \r\n        \r\n    };\r\n\r\n    \r\n    \r\n\r\n      \r\n    render() {\r\n        return (\r\n            <div className=\"Main\">\r\n                <h1>EXCHANGE</h1>\r\n            <form onSubmit={this.handleSubmit.bind(this)}>\r\n                <div>\r\n                <input type=\"text\" onChange={this.props.handleInputSum} />\r\n                        <br/>\r\n                  <label >from: </label>\r\n                     <select value={this.props.state.tempFrom} onChange={this.props.handleFrom}>\r\n                     <option value=\"\" selected>Please select</option>\r\n                    {this.props.state.coins.map((e)=>{return <option value={e.name}>{e.name} </option>})}    \r\n                     </select><br></br>\r\n                </div>\r\n\r\n                <div>\r\n                  <label >to: </label>\r\n                     <select value={this.props.state.tempTo} onChange={this.props.handleTo}>\r\n                     <option value=\"\" selected>Please select</option>\r\n                    {this.props.state.coins.map((e)=>{return <option value={e.name}>{e.name} </option>})}    \r\n                     </select><br></br>\r\n                </div>\r\n\r\n\r\n                        \r\n                        <br/>\r\n                        <button onClick={this.props.handleStart}>START</button>\r\n                        <br/>\r\n\r\n                        </form>\r\n                        <Link to='/update'>Update</Link>\r\n                        <a href=\"http://www.facebook.com\">Share on Facebook!</a>\r\n                        <button onClick={this.switch}>View exchange list</button>\r\n                        <br/>\r\n\r\n                            \r\n                        <div>\r\n                             {this.state.toggle && this.props.state.actions.map((e,i)=>{\r\n                                return (\r\n                                         <ActionList from={e.from}\r\n                                                      to={e.to}\r\n                                                       before={e.before}\r\n                                                        after={e.after}\r\n                                                         id={e.id}\r\n                                                          del={this.props.del}/>\r\n                                       )\r\n                             })}\r\n                        </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","\nimport React, { Component } from 'react'\nimport {BrowserRouter as Router,Switch,Route,Link} from \"react-router-dom\"\nimport './App.css';\nimport Update from './components/Update.js'\nimport Main from './components/Main';\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      coins:[{name:'sheckel',value:1},\n               {name:'dollar',value:3.5},\n                 {name:'euro',value:4}],\n      actions: [],\n      tempFrom:'',\n      tempTo:'',\n      tempSum:0,\n      newCoin:'',\n      newCoinValue:0\n    }\n  }\n\n  delAction=(num)=>{\n    let filtered=this.state.actions.filter((e)=>(e.id!==num))\n    this.setState({actions:filtered})\n  };\n\n  handleNewCoin=(e)=>{\n    this.setState({newCoin:e.target.value})\n  };\n  handleNewCoinValue=(e)=>{\n    this.setState({newCoinValue:e.target.value}) \n  };\n\n  updateCoin=()=>{\n    //check if coin is in the list \n      let flag=0,flag2=0;\n      this.state.coins.map((e)=>{\n          if(this.state.newCoin===e.name){\n            flag++;\n          }\n      })\n\n      // let englishChars = /^[A-Za-z]*$/;\n      // for(let i=0;i>this.state.newCoin.length;i++){\n      //   console.log(englishChars.test(this.state.newCoin[i],i));\n        \n      //   if (englishChars.test(this.state.newCoin[i])){\n      //     flag2++;\n      //     console.log('not');\n          \n      // }\n      // }\n      \n\n\n\n\n      //if not add to the list \n          if( flag===0 && this.state.newCoin.length>3 && this.state.newCoinValue>0){\n\n            let coinObject={name:this.state.newCoin ,value:this.state.newCoinValue}\n            this.setState({coins:[...this.state.coins ,coinObject]})\n          }else{\n            alert('err')\n          }\n      //reset the temp\n      // this.setState({newCoin:'',newCoinValue:0})\n      \n  };\n\n  handleFrom=(e)=>{\n    this.setState({tempFrom:e.target.value})\n  };\n  handleTo=(e)=>{\n    this.setState({tempTo:e.target.value}) \n  };\n  handleInputSum=(e)=>{\n      this.setState({tempInputSum:e.target.value})\n  }\n\n  handleStart=()=>{\n      //check input for only numbers ,no chars allowd\n        let isNum = isNaN(this.state.tempInputSum)\n        let MultiplyOperator=0;\n        this.state.coins.map((e)=>{\n            if(this.state.tempFrom===e.name){\n               MultiplyOperator=e.value;\n                \n            }\n        })\n        let DivideOperator=0;\n        this.state.coins.map((e)=>{\n            if(this.state.tempTo===e.name){\n               DivideOperator=e.value;\n                \n            }\n        })\n        // console.log(MultiplyOperator);\n        // console.log(DivideOperator);\n        // console.log(!isnum); test line \n        if(!isNum && this.state.tempInputSum>0){\n                //multiply input by {tempFrom} save to sum\n                   let sum = this.state.tempInputSum * MultiplyOperator;\n                      //divide input by {tempTo} save it to sum \n                        sum = sum/DivideOperator;\n                          //alert sum \n                          alert(sum);\n\n                            //update {from} and {to} and {how much before} and {how much after}\n                            let actionId = this.state.actions.length+1;\n                            let tempAction={from:this.state.tempFrom,\n                                              to:this.state.tempTo,\n                                               before:this.state.tempInputSum,\n                                                  after:sum,\n                                                    id:actionId}\n                                        // console.log(tempAction);\n                            this.setState({actions:[...this.state.actions,tempAction]})\n        }else{\n            alert('err');\n        }\n\n        //reset the temps\n        this.setState({tempInputSum:0})\n    }\n  \n\n  \n\n  \n\n  render() {\n    return (\n      <div className='App'>\n        <Router>\n          <Switch>\n            <Route exact path='/' render={(props) => <Main {...props}\n                                                           state={this.state}\n                                                            handleFrom={this.handleFrom}\n                                                             handleTo={this.handleTo}\n                                                              handleInputSum={this.handleInputSum}\n                                                               handleStart={this.handleStart}\n                                                                del={this.delAction}\n\n\n                                                           />}/>\n            <Route exact path='/update' render={(props) => <Update {...props} \n                                                                    state={this.state}\n                                                                     handleNewCoin={this.handleNewCoin}\n                                                                      handleNewCoinValue={this.handleNewCoinValue}\n                                                                       updateCoin={this.updateCoin}\n                                                            />}/>\n\n        \n         </Switch>\n        </Router>\n      </div>//App\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}